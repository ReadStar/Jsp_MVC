package controller;

import java.io.IOException;
import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import action.Action;
import action.BoardListAction;
import action.BoardWriteProAction;
import vo.ActionForward;

@WebServlet("*.me")
public class MemberFrontController extends HttpServlet {
	protected void doProcess(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		// POST 방식 요청에 대한 한글 처리
		request.setCharacterEncoding("UTF-8");
		
		// 서블릿 주소 가져오기
		String command = request.getServletPath();
		System.out.println("요청 서블릿 주소 : " + command);
		
		// 각 요청 처리에 필요한 객체를 다루는 변수 선언
		Action action = null;
		ActionForward forward = null;
		
		// if문을 사용하여 각 서블릿 주소 판별 및 각 요청 처리를 위한 작업 요청
				if(command.equals("/MemberLogionForm.me")) {
					/*
					 * 글쓰기 페이지에 대한 요청은 비즈니스 로직 없이
					 * View 페이지(JSP)로 바로 포워딩 수행
					 * - 기존 서블릿 주소가 유지되어야 하므로 Dispatcher 방식 포워딩
					 *   => ActionForward 객체에 redirect 변수값을 false 로 설정
					 *      (boolean 타입 기본 값이 false 이므로 별도 설정 필요 없음)\
					 *   => 따라서, 포워딩 주소만 지정
					 * - 포워딩 주소 : board 폴더 내의 qna_board_write.jsp
					 */
					// 1. ActionForward 객체 생성(변수는 이미 선언되어 있음)
					forward = new ActionForward();
					// 2. 포워딩 경로 설정
					forward.setPath("/board/member.jsp");
					// 3. 포워딩 방식 설정(Dispatcher 방식)
//					forward.setRedirect(false); // 기본값이 false 이므로 설정 생략 가능
				} else if (command.equals("/MemberLoginPro.me")) {
					action = new LoginProAction();
					try {
						// 2. Action 클래스의 execute() 메서드 호출
						// => 리턴되는 ActionForward 객체 전달받기(직접 생성하지 않음!)
						// => throws 에 의해 예외가 전달되므로 try ~ catch 필요
						forward = action.execute(request, response);
					} catch (Exception e) {
						e.printStackTrace();
					}
				} else if(command.equals("/MemberJoinForm.me")) {
					action = new BoardListAction();
					
					try {
						forward = action.execute(request, response);
					} catch (Exception e) {
						e.printStackTrace();
					}
				}
	}

	protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		doProcess(request, response);
	}

	protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		doProcess(request, response);
	}

}
