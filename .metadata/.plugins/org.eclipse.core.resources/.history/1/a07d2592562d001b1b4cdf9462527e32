package controller;

import java.io.IOException;

import javax.servlet.RequestDispatcher;
import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import action.Action;
import action.BoardListAction;
import action.BoardWriteProAction;
import action.MemberLoginProAction;
import vo.ActionForward;

@WebServlet("*.me")
public class MemberFrontController extends HttpServlet {
	protected void doProcess(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		request.setCharacterEncoding("UTF-8");
		
		String command = request.getServletPath();
		System.out.println("요청 서블릿 주소 : " + command);
		
		Action action = null;
		ActionForward forward = null;
		
				if(command.equals("/MemberLoginForm.me")) {
					forward = new ActionForward();
					forward.setPath("/board/login_form.jsp");
				} else if (command.equals("/MemberLoginPro.me")) {
					action = new MemberLoginProAction();
					try {
						forward = action.execute(request, response);
					} catch (Exception e) {
						e.printStackTrace();
					}
				} else if(command.equals("/MemberJoinForm.me")) {
					action = new MemberJoinFormAction();
					forward.setPath("/board/join_form.jsp");
					try {
						forward = action.execute(request, response);
					} catch (Exception e) {
						e.printStackTrace();
					}
				}else if(command.equals("/MemberJoinPro.me")) {
					action = new MemberJoinProAction();
					try {
						forward = action.execute(request, response);
					}catch (Exception e) {
						e.printStackTrace();
					}
				}else if(command.equals("/MemberLogout.me")) {
					action = new MemberLogoutProAction();
					
					try {
						forward = action.execute(request, response);
					} catch (Exception e) {
						e.printStackTrace();
					}
				}
				
				
				if(forward != null) {
					// 2. ActionForward 객체 내의 포워딩 방식에 따라 각각의 포워딩 수행
					// => Redirect 방식 : isRedirect() == true, 
					//    Dispatcher 방식 : isRedirect() == false
					if(forward.isRedirect()) {
						// 3. Redirect 방식일 경우 
						// response 객체의 sendRedirect() 메서드를 호출하여 포워딩
						// => 파라미터 : 포워딩 할 URL
						response.sendRedirect(forward.getPath());
					} else { 
						// 4. Dispatcher 방식일 경우
						// 4-1. request 객체의 getRequestDispatcher() 메서드를 호출하여
						//      RequestDispatcher 객체를 리턴받기
						//      => 파라미터 : 포워딩 할 URL
						RequestDispatcher dispatcher = 
								request.getRequestDispatcher(forward.getPath());
						// 4-2. RequestDispatcher 객체의 forward() 메서드를 호출하여
						//      포워딩 수행(파라미터 : request, response 객체)
						dispatcher.forward(request, response);
					}
					// ----------------------------------------------------------------
				
				}
	}

	protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		doProcess(request, response);
	}

	protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		doProcess(request, response);
	}

}
