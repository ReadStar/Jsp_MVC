/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.57
 * Generated at: 2020-11-24 03:33:10 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.board;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import vo.PageInfo;
import vo.BoardBean;
import java.util.ArrayList;

public final class qna_005fboard_005flist_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("vo.BoardBean");
    _jspx_imports_classes.add("vo.PageInfo");
    _jspx_imports_classes.add("java.util.ArrayList");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");

	// session 객체에 저장된 id 값 가져와서 변수에 저장
	String id = (String)session.getAttribute("id");
	
	// 전달받은 request 객체로부터 데이터 가져오기
	// "pageInfo" 객체와 "articleList" 객체를 request 객체로부터 꺼내서 저장
	// "pageInfo" 객체로부터 페이지 관련 값들을 꺼내서 변수에 저장
	ArrayList<BoardBean> articleList = 
				(ArrayList<BoardBean>)request.getAttribute("articleList");
	
	PageInfo pageInfo = (PageInfo)request.getAttribute("pageInfo");
	int nowPage = pageInfo.getPage();
	int maxPage = pageInfo.getMaxPage();
	int startPage = pageInfo.getStartPage();
	int endPage = pageInfo.getEndPage();
	int listCount = pageInfo.getListCount();

      out.write("    \n");
      out.write("<!DOCTYPE html>\n");
      out.write("<html>\n");
      out.write("<head>\n");
      out.write("<meta charset=\"UTF-8\">\n");
      out.write("<title>MVC 게시판</title>\n");
      out.write("<style type=\"text/css\">\n");
      out.write("\t#listForm {\n");
      out.write("\t\twidth: 1024px;\n");
      out.write("\t\tmax-height: 610px;\n");
      out.write("\t\tborder: 1p solid red;\n");
      out.write("\t\tmargin: auto;\n");
      out.write("\t}\n");
      out.write("\t\n");
      out.write("\th2 {\n");
      out.write("\t\ttext-align: center;\n");
      out.write("\t}\n");
      out.write("\t\n");
      out.write("\ttable {\n");
      out.write("\t\tmargin: auto;\n");
      out.write("\t\twidth: 1024px;\n");
      out.write("\t}\n");
      out.write("\t\n");
      out.write("\t#tr_top {\n");
      out.write("\t\tbackground: orange;\n");
      out.write("\t\ttext-align: center;\n");
      out.write("\t}\n");
      out.write("\t\n");
      out.write("\t#pageList {\n");
      out.write("\t\tmargin: auto;\n");
      out.write("\t\twidth: 1024px;\n");
      out.write("\t\ttext-align: center;\n");
      out.write("\t}\n");
      out.write("\t\n");
      out.write("\t#emptyArea {\n");
      out.write("\t\tmargin: auto;\n");
      out.write("\t\twidth: 1024px;\n");
      out.write("\t\ttext-align: center;\n");
      out.write("\t}\n");
      out.write("\t\n");
      out.write("\t#buttonArea {\n");
      out.write("\t\tmargin: auto;\n");
      out.write("\t\twidth: 1024px;\n");
      out.write("\t\ttext-align: right;\n");
      out.write("\t}\n");
      out.write("\t\n");
      out.write("\ta {\n");
      out.write("\t\ttext-decoration: none;\n");
      out.write("\t}\n");
      out.write("\t\n");
      out.write("\t#login {\n");
      out.write("\t\ttext-align: right;\n");
      out.write("\t}\n");
      out.write("\t\n");
      out.write("</style>\n");
      out.write("</head>\n");
      out.write("<body>\n");
      out.write("\t<section id=\"login\">\n");
      out.write("\t\t<!-- \n");
      out.write("\t\t\t세션에서 가져온 id 값이 존재하지 않을 경우 \n");
      out.write("\t\t\t로그인(MemberLoginForm.me), 회원가입(MemberJoinForm.me) 링크 \n");
      out.write("\t\t-->\n");
      out.write("\t\t");

		if(id == null) { 
		
      out.write("\n");
      out.write("\t\t\t<a href=\"MemberLoginForm.me\">로그인</a> | <a href=\"MemberJoinForm.me\">회원가입</a>\n");
      out.write("\t\t");
} else { 
      out.write("\n");
      out.write("\t\t<!-- 세션에서 가져온 id 값이 존재할 경우 아이디 표시 및 로그아웃(MemberLogout.me) 링크 -->\n");
      out.write("\t\t\t");
      out.print(id );
      out.write("님 | <a href=\"MemberLogout.me\">로그아웃</a>\n");
      out.write("\t\t");
} 
      out.write("\n");
      out.write("\t</section>\n");
      out.write("\t<!-- 게시판 리스트 -->\n");
      out.write("\t<section id=\"listForm\">\n");
      out.write("\t\t<h2>게시판 글 목록</h2>\n");
      out.write("\t\t<table>\n");
      out.write("\t\t\t");

			if(articleList != null && listCount > 0) {
			
      out.write("\n");
      out.write("\t\t\t\t<tr id=\"tr_top\">\n");
      out.write("\t\t\t\t\t<td width=\"100px\">번호</td>\n");
      out.write("\t\t\t\t\t<td>제목</td>\n");
      out.write("\t\t\t\t\t<td width=\"150px\">작성자</td>\n");
      out.write("\t\t\t\t\t<td width=\"150px\">날짜</td>\n");
      out.write("\t\t\t\t\t<td width=\"100px\">조회수</td>\n");
      out.write("\t\t\t\t</tr>\n");
      out.write("\t\t\t\t");

				for(int i = 0; i < articleList.size(); i++) {
				
      out.write("\n");
      out.write("\t\t\t\t<tr>\n");
      out.write("\t\t\t\t\t<td align=\"center\">");
      out.print(articleList.get(i).getBoard_num() );
      out.write("</td>\n");
      out.write("\t\t\t\t\t<td>\n");
      out.write("\t\t\t\t\t");
if(articleList.get(i).getBoard_re_lev() != 0) { 
      out.write("\n");
      out.write("\t\t\t\t\t\t\t");
for(int j = 0; j <= articleList.get(i).getBoard_re_lev() * 2; j++) { 
      out.write("\n");
      out.write("\t\t\t\t\t\t\t\t\t&nbsp;\n");
      out.write("\t\t\t\t\t\t\t");
} 
      out.write("\n");
      out.write("\t\t\t\t\t\t\t▶\n");
      out.write("\t\t\t\t\t");
} 
      out.write("\n");
      out.write("\t\t\t\t\t\t&nbsp;\n");
      out.write("\t\t\t\t\t\t<a href=\"BoardDetail.bo?board_num=");
      out.print(articleList.get(i).getBoard_num() );
      out.write("&page=");
      out.print(nowPage );
      out.write("\">\n");
      out.write("\t\t\t\t\t\t");
      out.print(articleList.get(i).getBoard_subject() );
      out.write("\n");
      out.write("\t\t\t\t\t\t</a>\n");
      out.write("\t\t\t\t\t</td>\n");
      out.write("\t\t\t\t\t<td align=\"center\">");
      out.print(articleList.get(i).getBoard_name() );
      out.write("</td>\n");
      out.write("\t\t\t\t\t<td align=\"center\">");
      out.print(articleList.get(i).getBoard_date() );
      out.write("</td>\n");
      out.write("\t\t\t\t\t<td align=\"center\">");
      out.print(articleList.get(i).getBoard_readcount() );
      out.write("</td>\n");
      out.write("\t\t\t\t</tr>\n");
      out.write("\t\t\t\t\n");
      out.write("\t\t\t\t");
}
      out.write("\n");
      out.write("\t\t</table>\n");
      out.write("\t</section>\n");
      out.write("\t<section id=\"buttonArea\">\n");
      out.write("\t\t<input type=\"button\" value=\"글쓰기\" onclick=\"location.href='BoardWriteForm.bo'\" />\n");
      out.write("\t</section>\n");
      out.write("\t<section id=\"pageList\">\n");
      out.write("\t");
if(nowPage <= 1) {
      out.write("\n");
      out.write("\t\t\t<input type=\"button\" value=\"이전\">&nbsp;\n");
      out.write("\t");
} else {
      out.write("\n");
      out.write("\t\t\t<input type=\"button\" value=\"이전\" onclick=\"location.href='BoardList.bo?page=");
      out.print(nowPage - 1 );
      out.write("'\">&nbsp;\n");
      out.write("\t");
} 
      out.write("\n");
      out.write("\t\n");
      out.write("\t");
for(int i = startPage; i <= endPage; i++) { 
			if(i == nowPage) { 
      out.write("\n");
      out.write("\t\t\t\t[");
      out.print(i );
      out.write("]&nbsp;\n");
      out.write("\t\t\t");
} else { 
      out.write("\n");
      out.write("\t\t\t\t\t<a href=\"BoardList.bo?page=");
      out.print(i );
      out.write('"');
      out.write('>');
      out.write('[');
      out.print(i );
      out.write("]</a>&nbsp;\n");
      out.write("\t\t\t");
} 
      out.write('\n');
      out.write('	');
} 
      out.write("\n");
      out.write("\t\n");
      out.write("\t");
if(nowPage >= maxPage) { 
      out.write("\n");
      out.write("\t\t\t<input type=\"button\" value=\"다음\">\n");
      out.write("\t");
} else { 
      out.write("\n");
      out.write("\t\t\t<input type=\"button\" value=\"다음\" onclick=\"location.href='BoardList.bo?page=");
      out.print(nowPage + 1 );
      out.write("'\">\n");
      out.write("\t");
} 
      out.write("\n");
      out.write("\t</section>\n");
      out.write("\t");

	} else {
	
      out.write("\n");
      out.write("\t<section id=\"emptyArea\">등록된 글이 없습니다</section>\n");
      out.write("\t");

	}
	
      out.write("\n");
      out.write("</body>\n");
      out.write("</html>\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
