/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.57
 * Generated at: 2020-11-24 03:28:33 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.member;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class join_005fform_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\n");
      out.write("<!DOCTYPE html>\n");
      out.write("<html>\n");
      out.write("<head>\n");
      out.write("<meta charset=\"UTF-8\">\n");
      out.write("<title>MVC_Board</title>\n");
      out.write(" \n");
      out.write("<style type=\"text/css\">\n");
      out.write("\th1 {\n");
      out.write("\t\ttext-align: center;\t\n");
      out.write("\t}\n");
      out.write("\t\n");
      out.write("\ttable {\n");
      out.write("\t\tborder: 1px solid black;\n");
      out.write("\t\twidth : 400px;\n");
      out.write("\t\tmargin: auto;\n");
      out.write("\t\ttext-align: left;\n");
      out.write("\t}\n");
      out.write("\t\n");
      out.write("</style>\n");
      out.write("<script type=\"text/javascript\">\n");
      out.write("\t// submit 전 최종 상태(아이디, 패스워드 규칙 일치 여부) 저장할 전역변수 설정\n");
      out.write("\tvar checkIdResult = false, checkPasswdResult = false; \n");
      out.write("\n");
      out.write("\t// -------------------------------------------------------------------------------\n");
      out.write("\t// 회원 ID 에 대한 정규표현식(4 ~ 12자리 영문, 숫자 조합) 체크를 위해\n");
      out.write("\t// ID 폼을 전달받아 입력받은 ID 에 대한 유효성 검사 함수\n");
      out.write("\tfunction checkId(idForm) { // 파라미터 this 로 전달된 ID 입력폼을 매개변수에 저장\n");
      out.write("\t\tvar id = idForm.value; // ID 입력폼의 입력값을 가져와서 변수에 저장\n");
      out.write("\t\t\n");
      out.write("\t\t// ID 입력 항목의 체크 결과 메세지 출력에 필요한 <div> 태그의 element 가져오기\n");
      out.write("\t\tvar element = document.getElementById('checkIdResult');\n");
      out.write("\t\t\n");
      out.write("\t\t// ID 유효성 검사를 위한 정규표현식 설정\n");
      out.write("\t\t// => 첫글자 영문자로 시작, 두번째부터 영문자, 숫자 조합 3 ~ 11자리 반복 \n");
      out.write("\t\t// => 영문자(대문자 또는 소문) : [A-Za-z]\n");
      out.write("\t\t// => 숫자 : [0-9]\n");
      out.write("\t\t// => 3 ~ 11자리 반복 : {3,11}\n");
      out.write("\t\t// => 플래그 /x/g : x 문자열의 전체에 대해서 정규표현식을 사용하여 검사 \n");
      out.write("\t\tvar regex = /^[A-Za-z][A-Za-z0-9]{3,11}$/g;\n");
      out.write("\t\t\n");
      out.write("\t\t// 자바스크립트에서 정규표현식 판별을 위해서는 다음과 같은 문자열 사용\n");
      out.write("\t\t// => 정규표현식문자열.exec(검사할데이터) => 판별 결과가 true 또는 false\n");
      out.write("\t\tif(regex.exec(id)) { // 정규표현식과 일치할 경우\n");
      out.write("\t\t\telement.innerHTML = \"사용 가능\";\n");
      out.write("\t\t\tcheckIdResult = true; // 전역변수 true 로 변경\n");
      out.write("\t\t} else { // 일치하지 않을 경우\n");
      out.write("\t\t\telement.innerHTML = \"사용 불가\";\n");
      out.write("\t\t\tcheckIdResult = false; // 전역변수 false 로 변경(필수!)\n");
      out.write("\t\t}\n");
      out.write("\t\t\n");
      out.write("\t}\n");
      out.write("\t\n");
      out.write("\t// 회원 패스워드에 대한 정규표현식(4 ~ 16자리 영문, 숫자, 특수문자 조합) 체크를 위해\n");
      out.write("\t// 패스워드 폼을 전달받아 입력받은 패스워드에 대한 유효성 검사\n");
      out.write("\tfunction checkPasswd(passwdForm) { // 파라미터 this 로 전달된 ID 입력폼을 매개변수에 저장\n");
      out.write("\t\tvar passwd = passwdForm.value; // ID 입력폼의 입력값을 가져와서 변수에 저장\n");
      out.write("\t\t\n");
      out.write("\t\t// 패스워드 입력 항목의 체크 결과 메세지 출력에 필요한 <div> 태그의 element 가져오기\n");
      out.write("\t\tvar element = document.getElementById('checkPasswdResult');\n");
      out.write("\t\t\n");
      out.write("\t\tvar lengthRegex = /^[A-Za-z0-9!@#$%]{4,16}$/;\n");
      out.write("\t\t// upperCaseRegex(대문자), lowerCaseRegex(소문자), digitRegex(숫자), \n");
      out.write("\t\t// specRegex(특수문자 !@#$%) 정규표현식 작성\n");
      out.write("\t\tvar upperCaseRegex = /[A-Z]/;\n");
      out.write("\t\tvar lowerCaseRegex = /[a-z]/;\n");
      out.write("\t\tvar digitRegex = /[0-9]/;\n");
      out.write("\t\tvar specRegex = /[!@#$%]/;\n");
      out.write("\t\t\n");
      out.write("\t\t// 길이 체크(lengthRegex)를 통과할 경우에만 각 항목에 대한 체크 실시\n");
      out.write("\t\tif(lengthRegex.exec(passwd)) {\n");
      out.write("\t\t\t// 대문자, 소문자, 숫자, 특수문자 체크하여 카운팅(복잡도 체크)\n");
      out.write("\t\t\tvar count = 0;\n");
      out.write("\t\t\t// 각 항목별 체크 후 true 일 경우 count 1씩 증가시킴\n");
      out.write("\t\t\tif(upperCaseRegex.exec(passwd)) count++;\n");
      out.write("\t\t\tif(lowerCaseRegex.exec(passwd)) count++;\n");
      out.write("\t\t\tif(digitRegex.exec(passwd)) count++;\n");
      out.write("\t\t\tif(specRegex.exec(passwd)) count++;\n");
      out.write("\t\t\t\n");
      out.write("// \t\t\telement.innerHTML = \"사용 가능 \" + count;\n");
      out.write("\n");
      out.write("\t\t\t// 점수(count) 에 따른 안전도 출력\n");
      out.write("\t\t\tif(count == 4) {\n");
      out.write("\t\t\t\telement.innerHTML = \"사용 가능(안전)\";\n");
      out.write("\t\t\t\tcheckPasswdResult = true; // 전역변수 true 로 변경\n");
      out.write("\t\t\t} else if(count == 3) {\n");
      out.write("\t\t\t\telement.innerHTML = \"사용 가능(보통)\";\n");
      out.write("\t\t\t\tcheckPasswdResult = true; // 전역변수 true 로 변경\n");
      out.write("\t\t\t} else if(count == 2) {\n");
      out.write("\t\t\t\telement.innerHTML = \"사용 가능(위험)\";\n");
      out.write("\t\t\t\tcheckPasswdResult = true; // 전역변수 true 로 변경\n");
      out.write("\t\t\t} else {\n");
      out.write("\t\t\t\telement.innerHTML = \"사용 불가(두 가지 이상 조합)\";\n");
      out.write("\t\t\t\tcheckPasswdResult = false; // 전역변수 false 로 변경\n");
      out.write("\t\t\t}\n");
      out.write("\n");
      out.write("\t\t} else {\n");
      out.write("\t\t\telement.innerHTML = \"사용 불가\";\n");
      out.write("\t\t\tcheckPasswdResult = false; // 전역변수 false 로 변경\n");
      out.write("\t\t}\n");
      out.write("\t\t\n");
      out.write("\t}\n");
      out.write("\t\n");
      out.write("\t// 아이디, 패스워드 정규표현식 체크 후 정상이면 true 리턴(submit), 아니면 false 리턴\n");
      out.write("\tfunction check() {\n");
      out.write("\t\tif(checkIdResult && checkPasswdResult) {\n");
      out.write("\t\t\treturn true;\n");
      out.write("\t\t} else {\n");
      out.write("\t\t\talert('아이디 또는 패스워드 규칙 확인 필수!');\n");
      out.write("\t\t\treturn false;\n");
      out.write("\t\t}\n");
      out.write("\t}\n");
      out.write("\t\n");
      out.write("</script>\n");

	// session 객체에 저장된 id 값이 존재할 경우
	// "잘못된 접근입니다." 출력 후 메인페이지로 이동
	if(session.getAttribute("id") != null) {
		
      out.write("\n");
      out.write("\t\t<script>\n");
      out.write("\t\t\talert('잘못된 접근입니다.');\n");
      out.write("\t\t\tlocation.href=\"./\";\n");
      out.write("\t\t</script>\n");
      out.write("\t\t");

	}


      out.write("    \n");
      out.write("</head>\n");
      out.write("<body>\n");
      out.write("\t<h1>회원가입</h1>\n");
      out.write("\t<form action=\"MemberJoinPro.me\" method=\"post\" name=\"joinForm\" onsubmit=\"return check()\">\n");
      out.write("\t\t<table>\n");
      out.write("\t\t\t<tr>\n");
      out.write("\t\t\t\t<td>이름</td>\n");
      out.write("\t\t\t\t<td><input type=\"text\" name=\"name\"  required=\"required\" size=\"15\"></td>\n");
      out.write("\t\t\t</tr>\n");
      out.write("\t\t\t<tr>\n");
      out.write("\t\t\t\t<td>아이디</td>\n");
      out.write("\t\t\t\t<td>\n");
      out.write("\t\t\t\t\t<!-- 아이디 한 글자 입력할 때마다 정규표현식 체크 -->\n");
      out.write("\t\t\t\t\t<input type=\"text\" name=\"id\" required=\"required\" size=\"15\" \n");
      out.write("\t\t\t\t\t\t\tplaceholder=\"4-12자리 영문,숫자 조합\" onkeyup=\"checkId(this)\">\n");
      out.write("\t\t\t\t\t<div id=\"checkIdResult\"><!-- 자바스크립트에서 메세지 출력 공간 --></div>\n");
      out.write("\t\t\t\t</td>\n");
      out.write("\t\t\t</tr>\n");
      out.write("\t\t\t<tr>\n");
      out.write("\t\t\t\t<td>패스워드</td>\n");
      out.write("\t\t\t\t<td>\n");
      out.write("\t\t\t\t\t<input type=\"password\" name=\"passwd\" required=\"required\" size=\"15\"\n");
      out.write("\t\t\t\t\t\t\tplaceholder=\"4-16자리 영문,숫자,특수문자 조합\" onkeyup=\"checkPasswd(this)\">\n");
      out.write("\t\t\t\t\t<div id=\"checkPasswdResult\"><!-- 자바스크립트에서 메세지 출력 공간 --></div>\n");
      out.write("\t\t\t\t</td>\n");
      out.write("\t\t\t</tr>\n");
      out.write("\t\t\t<tr>\n");
      out.write("\t\t\t\t<td>나이</td>\n");
      out.write("\t\t\t\t<td><input type=\"text\" name=\"age\" required=\"required\" size=\"15\"></td>\n");
      out.write("\t\t\t</tr>\n");
      out.write("\t\t\t<tr>\n");
      out.write("\t\t\t\t<td>E-Mail</td>\n");
      out.write("\t\t\t\t<td><input type=\"text\" name=\"email\" required=\"required\" size=\"15\"></td>\n");
      out.write("\t\t\t</tr>\n");
      out.write("\t\t\t<tr>\n");
      out.write("\t\t\t\t<td>성별</td>\n");
      out.write("\t\t\t\t<td>\n");
      out.write("\t\t\t\t\t<input type=\"radio\" name=\"gender\" value=\"남\" checked=\"checked\" size=\"15\">남&nbsp;&nbsp;\n");
      out.write("\t\t\t\t\t<input type=\"radio\" name=\"gender\" value=\"여\" size=\"15\">여\n");
      out.write("\t\t\t\t</td>\n");
      out.write("\t\t\t</tr>\n");
      out.write("\t\t\t<tr>\n");
      out.write("\t\t\t\t<td colspan=\"2\" align=\"center\">\n");
      out.write("\t\t\t\t\t<input type=\"submit\" value=\"회원가입\">\n");
      out.write("\t\t\t\t\t<input type=\"button\" value=\"돌아가기\" onclick=\"history.back()\">\n");
      out.write("\t\t\t\t</td>\n");
      out.write("\t\t\t</tr>\n");
      out.write("\t\t</table>\n");
      out.write("\t</form>\n");
      out.write("</body>\n");
      out.write("</html>\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
